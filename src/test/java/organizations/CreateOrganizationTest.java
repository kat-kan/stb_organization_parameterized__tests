package organizations;

import base.BaseTest;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static io.restassured.RestAssured.given;
import static org.apache.http.HttpStatus.SC_OK;
import static org.assertj.core.api.Assertions.assertThat;

public class CreateOrganizationTest extends BaseTest {

    private static final String DEFAULT_NAME = "098teamishere_";
    private static final String DEFAULT_WEBSITE = "https://website.pl";
    private static final String DEFAULT_DISPLAY_NAME = "Team display name";

    private String orgId;
    private JsonPath json;


    @AfterEach
    public void afterEach() {

        orgId = json.getString("id");

        if (orgId != null) {
            given()
                    .spec(reqSpecification)
                    .pathParam("id", orgId)
                    .when()
                    .delete(BASE_URL + ORGANIZATIONS + "/{id}")
                    .then()
                    .statusCode(SC_OK);
        }
    }

    @DisplayName("Create organization with valid data")
    @ParameterizedTest(name = "desc : {0}, name : {1}, website : {2}")
    @MethodSource("createValidOrgData")
    public void createNewOrganizationTest(String desc, String name, String website) {

        Response response = given()
                .spec(reqSpecification)
                .queryParam("displayName", DEFAULT_DISPLAY_NAME)
                .queryParam("desc", desc)
                .queryParam("name", name)
                .queryParam("website", website)
                .when()
                .post(BASE_URL + ORGANIZATIONS)
                .then()
                .statusCode(SC_OK)
                .extract()
                .response();

        json = response.jsonPath();
        assertThat(json.getString("displayName")).isEqualTo(DEFAULT_DISPLAY_NAME);
        assertThat(json.getString("desc")).isEqualTo(desc);
        assertThat(json.getString("name")).isEqualTo(name);
        assertThat(json.getString("website")).isEqualTo(website);

    }

    /*createInvalidOrgData test is currently failing because of bugs in name and website fields validation.
     The organization with invalid data should not be created (we expect 400 status code), but it is created (with valid data generated by system).
     The test has a bit different structure to enable deleting boards created in this way*/

    @DisplayName("Create organization with invalid data")
    @ParameterizedTest(name = "desc : {0}, name : {1}, website : {2}")
    @MethodSource("createInvalidOrgData")
    public void createNewOrganizationInvalidDataTest(String desc, String name, String website) {

        ValidatableResponse then = given()
                .spec(reqSpecification)
                .queryParam("displayName", DEFAULT_DISPLAY_NAME)
                .queryParam("desc", desc)
                .queryParam("name", name)
                .queryParam("website", website)
                .when()
                .post(BASE_URL + ORGANIZATIONS)
                .then();

        Response response = then.extract().response();
        json = response.jsonPath();
        then.statusCode(HttpStatus.SC_BAD_REQUEST);
    }

    private static Stream<Arguments> createValidOrgData() {

        return Stream.of(
                Arguments.of("I am testing website starting with https", DEFAULT_NAME, "https://website.com"),
                Arguments.of("I am testing website starting with http", DEFAULT_NAME, "http://website.com"),
                Arguments.of("I am testing minimum length of org name = 3", "0xq", DEFAULT_WEBSITE),
                Arguments.of("I am testing that name can consist of underscores", "awe_team", DEFAULT_WEBSITE),
                Arguments.of("I am testing that name can consist of numbers", "awe123team", DEFAULT_WEBSITE)
        );
    }

    private static Stream<Arguments> createInvalidOrgData() {

        return Stream.of(
                Arguments.of("I am testing website that does not start with http or https, it should be rejected", DEFAULT_NAME, "www.website.com"),
                Arguments.of("I am testing website that is a random string, it should be rejected", DEFAULT_NAME, "kitty"),
                Arguments.of("I love testing org name that is shorter than expected minimum length of 3 characters, it should be rejected", "c", DEFAULT_WEBSITE),
                Arguments.of("I am testing name that consists of uppercase letters, it should be rejected", "KITTY", DEFAULT_WEBSITE),
                Arguments.of("I am testing name that consists of symbols other than underscore, it should be rejected", "!#%^&^", DEFAULT_WEBSITE)
        );
    }


}
