package organizations;

import base.BaseTest;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static io.restassured.RestAssured.given;
import static org.apache.http.HttpStatus.SC_OK;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class CreateOrganizationTest extends BaseTest {

    private String orgId;
    private JsonPath json;

    @AfterEach
    public void afterEach() {

        orgId = json.getString("id");

        if (orgId != null) {
            given()
                    .spec(reqSpecification)
                    .pathParam("id", orgId)
                    .when()
                    .delete(BASE_URL + ORGANIZATIONS + "/{id}")
                    .then()
                    .statusCode(SC_OK);
        }
    }

    @Order(1)
    @DisplayName("Create organization with valid data")
    @ParameterizedTest(name = "Display name : {0}, desc : {1}, name : {2}, website : {3}")
    @MethodSource("createValidOrgData")
    public void createNewOrganizationTest(String displayName, String desc, String name, String website) {

        Response response = given()
                .spec(reqSpecification)
                .queryParam("displayName", displayName)
                .queryParam("desc", desc)
                .queryParam("name", name)
                .queryParam("website", website)
                .when()
                .post(BASE_URL + ORGANIZATIONS)
                .then()
                .statusCode(SC_OK)
                .extract()
                .response();

        json = response.jsonPath();
    }

    /*createInvalidOrgData test is currently failing because of bugs in name and website fields validation.
     The organization with invalid data should not be created (we expect 400 status code), but it is created (with valid data generated by system).
     The test has a bit different structure to enable deleting boards created in this way*/

    @Order(2)
    @DisplayName("Create organization with invalid data")
    @ParameterizedTest(name = "Display name : {0}, desc : {1}, name : {2}, website : {3}")
    @MethodSource("createInvalidOrgData")
    public void createNewOrganizationInvalidDataTest(String displayName, String desc, String name, String website) {

        ValidatableResponse then = given()
                .spec(reqSpecification)
                .queryParam("displayName", displayName)
                .queryParam("desc", desc)
                .queryParam("name", name)
                .queryParam("website", website)
                .when()
                .post(BASE_URL + ORGANIZATIONS)
                .then();

        Response response = then.extract().response();
        json = response.jsonPath();
        then.statusCode(HttpStatus.SC_BAD_REQUEST);
    }

    private static Stream<Arguments> createValidOrgData() {

        return Stream.of(
                Arguments.of("First organization", "I am testing website starting with https", "awesometeam", "https://website.com"),
                Arguments.of("Second organization", "I am testing website starting with http", "awesomeorg", "http://website.com"),
                Arguments.of("Third organization", "I am testing minimum length of org name = 3", "awe", "https://website.com"),
                Arguments.of("Fourth organization", "I am testing that name can consist of underscores", "awe_team", "https://website.com"),
                Arguments.of("Fifth organization", "I am testing that name can consist of numbers", "awe123team", "https://website.com")
        );
    }

    private static Stream<Arguments> createInvalidOrgData() {

        return Stream.of(
                Arguments.of("Sixth organization", "I am testing website that does not start with http or https, it should be rejected", "awesometeam", "www.website.com"),
                Arguments.of("Seventh organization", "I am testing website that is a random string, it should be rejected", "awesomeorg", "kitty"),
                Arguments.of("Eight organization", "I love testing org name that is shorter than expected minimum length of 3 characters, it should be rejected", "c", "https://website.com"),
                Arguments.of("Ninth organization", "I am testing name that consists of uppercase letters, it should be rejected", "KITTY", "https://website.com"),
                Arguments.of("Tenth organization", "I am testing name that consists of symbols other than underscore, it should be rejected", "!#%^&^", "https://website.com")
        );
    }


}
